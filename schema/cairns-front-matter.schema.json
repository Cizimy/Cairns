{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://example.com/schemas/cairns-front-matter.schema.json",
  "title": "Cairns-Doc Front-Matter Schema (v2.0.1)",
  "description": "Defines the structure for YAML front-matter in Project Philosophy Library (Cairns) Markdown documents using JSON Schema Draft 2020-12. This version utilizes separate definition files for better maintainability and incorporates review feedback. Temporal consistency (e.g., created_at <= last_updated <= expires_at) and language code consistency (between language/preferred_langs and localized_overrides) MUST be checked externally (e.g., via CI).",
  "$comment": "This schema defines the core metadata structure for Cairns documents. It relies on external definition files (patterns.schema.json, common-defs.schema.json, metadata-defs.schema.json, content-defs.schema.json). Several consistency checks (temporal, language, path/ID existence) are intended to be performed by external tools like CI linters. v2.0.1: Added doc_type and made core_principles conditional based on layer.",
  "$vocabulary": {
    "https://json-schema.org/draft/2020-12/vocab/core": true,
    "https://json-schema.org/draft/2020-12/vocab/applicator": true,
    "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,
    "https://json-schema.org/draft/2020-12/vocab/validation": true,
    "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,
    "https://json-schema.org/draft/2020-12/vocab/format-assertion": true,
    "https://json-schema.org/draft/2020-12/vocab/meta-data": true
  },
  "type": "object",
  "properties": {
    "schema_version": {
      "type": "string",
      "const": "2.0.1",
      "$comment": "Indicates the version of this schema structure.",
      "description": "Version of this Cairns front-matter schema definition (must be '2.0.1').",
      "examples": ["2.0.1"]
    },
    "id": {
      "$ref": "patterns.schema.json#pattern-docId",
      "description": "Unique identifier for the document (e.g., 'design-principles'). Should be URL-safe and lowercase. Consider using a composite ID convention like 'layer-id' (e.g., 'l2-design-principles') for uniqueness across layers. Uniqueness MUST be enforced externally (e.g., via CI).",
      "$comment": "Pattern allows hyphens and dots.",
      "examples": ["design-principles", "l2-coding-standards"]
    },
    "title": {
      "type": "string",
      "description": "Human-readable title of the document.",
      "examples": ["Design Principles", "Coding Standards for Project X"]
    },
    "layer": {
      "type": "string",
      "enum": ["L0", "L1", "L2", "L3", "L4", "L5"],
      "description": "Information architecture layer: L0=Overview/Glossary, L1=Foundation/Philosophy, L2=General Engineering Principles, L3=Process & Collaboration, L4=Domain-Specific Design, L5=Ops & Runtime.",
      "$comment": "Reflects the 6-layer structure. Consistency with file path (if used) should be checked externally.",
      "examples": ["L2", "L4"]
    },
    "version": {
      "$ref": "patterns.schema.json#pattern-semVer",
      "description": "Document version, compliant with Semantic Versioning 2.0.0 (https://semver.org).",
      "examples": ["1.0.0", "2.1.0-beta.1"]
    },
    "doc_type": {
      "type": "string",
      "description": "Type of the document (e.g., guideline, reference, playbook). Used for searchability and automation. Defined in the schema.",
      "enum": [
        "guideline",
        "reference",
        "playbook",
        "adr_template",
        "policy",
        "report"
      ],
      "$comment": "The specific enum values should be finalized within the project, but these are initial suggestions based on the Document Map.",
      "examples": ["guideline", "playbook"]
    },
    "language": {
      "$ref": "patterns.schema.json#pattern-bcp47LangCode",
      "description": "Main language code (BCP-47) for the document content (e.g., 'ja', 'en-US').",
      "$comment": "Consistency with 'preferred_langs' and 'localized_overrides' keys MUST be checked externally (e.g., via CI).",
      "examples": ["ja", "en-US"]
    },
    "preferred_langs": {
      "type": "array",
      "items": {
        "$ref": "patterns.schema.json#pattern-bcp47LangCode"
      },
      "minItems": 1,
      "description": "List of preferred language codes (BCP-47) for display when multiple translations exist, ordered by preference.",
      "$comment": "Consistency with 'language' and 'localized_overrides' keys MUST be checked externally (e.g., via CI). Should ideally contain the main 'language'.",
      "examples": [ ["ja", "en"], ["en-US", "en-GB", "en"] ]
    },
    "status": {
      "$ref": "common-defs.schema.json#common-DocStatusEnum"
    },
    "visibility": {
      "$dynamicRef": "common-defs.schema.json#common-VisibilityLevel"
    },
    "authors": {
      "type": "array",
      "items": {
        "anyOf": [
          { "type": "string", "description": "Author's name (simple string)." },
          {
            "type": "object",
            "description": "Author details (structured object).",
            "properties": {
              "name": { "type": "string", "description": "Author's full name." },
              "email": { "type": "string", "format": "email", "description": "Author's email address." },
              "affiliation": { "type": "string", "description": "Author's affiliation (e.g., team, organization)." }
            },
            "required": ["name"],
            "unevaluatedProperties": false
          }
        ]
      },
      "minItems": 1,
      "description": "List of primary authors or contributors. Can be simple names or structured objects.",
      "examples": [ ["John Doe"], [{"name": "Jane Smith", "email": "jane@example.com"}] ]
    },
    "owner": {
      "description": "The responsible owner for this document (typically a team slug or group email). Must not be empty.",
      "oneOf": [
        {
          "type": "string",
          "format": "email",
          "minLength": 1,
          "description": "Owner identified by email address."
        },
        {
          "$ref": "patterns.schema.json#pattern-ownerSlug",
          "description": "Owner identified by a slug (non-email string)."
        }
      ],
      "examples": ["tech-leads@example.com", "platform-team"]
    },
    "created_at": {
      "type": "string",
      "format": "date-time",
      "description": "Document creation timestamp (ISO 8601 format).",
      "examples": ["2023-01-15T10:00:00Z"]
    },
    "last_updated": {
      "type": "string",
      "format": "date-time",
      "description": "Timestamp of the last significant update (ISO 8601 format).",
      "$comment": "Temporal consistency (created_at <= last_updated) MUST be checked externally (e.g., via CI).",
      "examples": ["2024-03-20T15:30:00+09:00"]
    },
    "review_cycle_days": {
      "type": "integer",
      "minimum": 1,
      "description": "Suggested review cycle frequency in days.",
      "examples": [90, 180]
    },
    "expires_at": {
      "type": "string",
      "format": "date-time",
      "description": "Timestamp when the document is considered expired or requires mandatory review (ISO 8601 format).",
      "$comment": "Temporal consistency (last_updated <= expires_at) MUST be checked externally (e.g., via CI).",
      "examples": ["2025-12-31T23:59:59Z"]
    },
    "deprecation_info": {
      "$dynamicRef": "metadata-defs.schema.json#metadata-DeprecationInfo"
    },
    "abstract": {
      "type": "string",
      "maxLength": 120,
      "description": "Very concise summary (~100 chars). Suitable for quick previews, tooltips, or AI short summaries.",
      "examples": ["Defines core principles for robust software design."]
    },
    "summary": {
      "type": "string",
      "maxLength": 300,
      "description": "Short summary (~300 chars). Provides more context than the abstract, suitable for AI medium summaries.",
      "examples": ["This document outlines key design principles like SOLID, DRY, and YAGNI, with explanations and rationale for their application in our projects."]
    },
    "detail_ref": {
      "$ref": "patterns.schema.json#pattern-filePathOrAnchor",
      "description": "Reference to the main content body (anchor starting with '#' or relative path starting with './' or '../'). Suitable for AI deep dives. WARNING: Path validation is format-only; secure path handling and existence check are required by the consuming application.",
      "examples": ["#core-principles", "./content/introduction.md"]
    },
    "keywords": {
      "type": "array",
      "items": { "type": "string" },
      "description": "List of keywords for search, categorization, and tag-based retrieval.",
      "examples": [ ["design", "architecture", "solid"], ["coding", "style", "javascript"] ]
    },
    "taxonomies": {
      "type": "object",
      "description": "Structured tags (key-value pairs) for faceted search and discovery (e.g., 'topic: architecture', 'domain: finance'). Allows more organized categorization than simple keywords.",
      "additionalProperties": {
        "type": "string"
      },
      "examples": [ {"topic": "architecture", "language": "typescript"}, {"domain": "finance", "project": "apollo"} ]
    },
    "media": {
      "type": "array",
      "items": { "$dynamicRef": "content-defs.schema.json#content-MediaReference" },
      "description": "List of associated media files (diagrams, images, videos).",
      "$comment": "Path existence for each media item MUST be checked externally (e.g., via CI)."
    },
    "templates": {
      "type": "array",
      "items": {
         "type": "string",
         "description": "Relative path to a template file. WARNING: Path validation is format-only; secure path handling and existence check are required by the consuming application."
      },
      "description": "List of template file paths provided for reference or use in conjunction with this document.",
      "$comment": "Path existence for each template MUST be checked externally (e.g., via CI).",
      "examples": [ ["./templates/class-diagram.drawio", "./templates/sequence-diagram.puml"] ]
    },
    "exceptions": {
      "$dynamicRef": "content-defs.schema.json#content-ExceptionPolicy"
    },
    "target_audience": {
      "type": "array",
      "items": { "type": "string" },
      "description": "Intended target audience or roles for this document (e.g., 'developers', 'architects', 'new-hires').",
      "examples": [ ["developers", "architects"], ["new-hires"] ]
    },
    "applicable_contexts": {
      "type": "array",
      "items": { "$dynamicRef": "content-defs.schema.json#content-ApplicabilityContext" },
      "description": "List of specific contexts (e.g., technology, project phase) where this document applies."
    },
    "maturity": {
      "$dynamicRef": "common-defs.schema.json#common-MaturityLevel"
    },
    "regulatory_refs": {
      "type": "array",
      "items": { "type": "string" },
      "description": "References to relevant regulations or external standards (e.g., 'ISO 27001', 'PCI-DSS v4.0').",
      "examples": [ ["ISO 27001", "PCI-DSS v4.0"] ]
    },
    "risk_level": {
      "$dynamicRef": "common-defs.schema.json#common-RiskLevel"
    },
    "a11y": {
      "$dynamicRef": "metadata-defs.schema.json#metadata-AccessibilityInfo"
    },
    "prerequisite_documents": {
      "type": "array",
      "items": { "$dynamicRef": "metadata-defs.schema.json#metadata-PrerequisiteDocument" },
      "description": "List of external prerequisite documents that should ideally be understood before reading this one."
    },
    "references": {
      "type": "array",
      "items": { "$dynamicRef": "metadata-defs.schema.json#metadata-Reference" },
      "description": "List of external references (URLs or other Cairns documents).",
      "$comment": "Referenced internal Cairns document IDs MUST have their existence checked externally (e.g., via CI)."
    },
    "relationships": {
      "type": "array",
      "items": { "$dynamicRef": "content-defs.schema.json#content-Relationship" },
      "description": "List of semantic relationships to other Cairns documents or principles.",
      "$comment": "Existence of 'from'/'to' targets (documents or principles) MUST be checked externally (e.g., via CI)."
    },
    "localized_overrides": {
      "type": "object",
      "propertyNames": {
        "$ref": "patterns.schema.json#pattern-bcp47LangCode"
      },
      "additionalProperties": { "$dynamicRef": "content-defs.schema.json#content-LocalizedContent" },
      "description": "Provides language-specific overrides for 'title', 'abstract', 'summary', and 'detail_ref'. Keys MUST be valid BCP-47 language codes.",
      "$comment": "Consistency with 'language'/'preferred_langs' and existence of any referenced 'detail_ref' paths MUST be checked externally (e.g., via CI)."
    },
    "checksum": {
      "$dynamicRef": "metadata-defs.schema.json#metadata-Checksum"
    },
    "signed_by": {
      "type": "array",
      "description": "List of signatures applied to the document, verifying integrity and authenticity. Requires 'checksum' to be present.",
      "items": {
        "$dynamicRef": "metadata-defs.schema.json#metadata-Signature"
      },
      "minItems": 1
    },
    "license": {
      "$dynamicRef": "metadata-defs.schema.json#metadata-LicenseInfo"
    },
    "llm_usage_hints": {
      "$dynamicRef": "metadata-defs.schema.json#metadata-LlmUsageHints"
    },
    "core_principles": {
      "type": "array",
      "minItems": 1,
      "items": { "$dynamicRef": "content-defs.schema.json#content-CorePrinciple" },
      "description": "List of core principles defined within this document. Note: This is conditionally required based on the 'layer' property (required for L0-L4)."
    }
  },
  "required": [
    "schema_version",
    "id",
    "title",
    "layer",
    "version",
    "status",
    "authors",
    "owner",
    "last_updated",
    "abstract",
    "summary",
    "detail_ref"
  ],
  "dependentRequired": {
    "signed_by": ["checksum"]
  },
  "dependentSchemas": {
    "status": {
      "allOf": [
        {
          "if": {
            "properties": { "status": { "const": "DEPRECATED" } },
            "required": ["status"]
          },
          "then": { "required": ["deprecation_info"] }
        },
        {
          "if": {
            "properties": { "status": { "$ref": "common-defs.schema.json#common-ApprovedOrFixedStatus" } },
            "required": ["status"]
          },
          "then": {
             "required": ["license", "checksum", "signed_by"],
             "$comment": "Approved or Fixed documents require license, checksum, and at least one signature."
          }
        }
      ]
    }
  },
  "if": {
    "properties": {
      "layer": { "enum": ["L0", "L1", "L2", "L3", "L4"] }
    },
    "required": ["layer"]
  },
  "then": {
    "required": ["core_principles"]
  },
  "patternProperties": {
    "^x_cairns_": { "$dynamicRef": "common-defs.schema.json#common-CustomExtension" }
  },
  "unevaluatedProperties": false
}